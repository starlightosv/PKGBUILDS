#!/bin/bash

# On Nvidia GPU machines, kernel and nvidia driver must update together:
# - if linux-lts is updated, nvidia-lts should be updated too
# - if linux     is updated, nvidia     should be updated too
#
# This app checks the above and informs the calling app with exit code:
#     0=success
#     1=failure
# On failure also error messages to stderr will be displayed.

Main()
{
    PATH=/usr/bin:$PATH

    lsmod | grep nvidia >/dev/null || exit 0                             # NVIDIA not is use
    [ -n "$(pacman -Qsq nvidia dkms | grep nvidia.*dkms)" ] && exit 0    # stop if any nvidia dkms driver is installed

    local linux_lts=no
    local linux=no
    local nvidia_lts=no
    local nvidia=no
    local msgs=() msg
    local pkgs pkg

    # Find updates if they are not as parameters.
    if [ -z "$1" ] ; then
        readarray -t pkgs <<< $(checkupdates | awk '{print $1}')
    else
        pkgs=("$@")
    fi

    # Check if kernel(s) and nvidia driver(s) are in the updates list.
    for pkg in "${pkgs[@]}" ; do
        case "$pkg" in
            linux)      linux=yes ;;
            linux-lts)  linux_lts=yes ;;
            nvidia)     nvidia=yes ;;
            nvidia-lts) nvidia_lts=yes ;;
        esac
    done

    # Notify if kernel will be updated but corresponding nvidia driver not.
    [ "$linux_lts $nvidia_lts" = "yes no" ] && msgs+=("'linux-lts' would be upgraded but 'nvidia-lts' not.")
    [ "$linux $nvidia" = "yes no" ]         && msgs+=("'linux' would be upgraded but 'nvidia' not.")
    if [ -n "$msgs" ] ; then
        local progname=$(basename "$0")
        for msg in "${msgs[@]}" ; do
            echo "==> $progname: error: $msg" >&2
        done
        return 1
    fi
}

Main "$@"
